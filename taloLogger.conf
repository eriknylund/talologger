#
###########################################################################
# 
# File:            taloLogger.conf
#
# License:         Donationware, see attached LICENSE file for more 
#                  information
#
# Author:          Olli Lammi (olammi@iki.fi)
#
# Version:         1.7h
#
# Date:            31.05.2016
#                   
# Description:     Configuration file for taloLogger.py
#
###########################################################################


############################################################################# 
# logger configuration
############################################################################# 

# log to console instead of log file (even if the log filename is configured 
# below) (true/false)
CONSOLE_LOGGING = true

# verbose logging mode / debug mode (more information about measurements 
# etc. logged) (true/false) 
VERBOSE_LOGGING = false

# go into background after start (true/false) 
DAEMON_MODE = false

# log file for the logger application
LOGFILE = /var/log/taloLogger.log

# time interval in seconds to read and store the data
LOG_INTERVAL = 120 

# time window in seconds to run the logging if of some reason
# the logging process wakes up late of the configured interval time
LOG_INTERVAL_LIMIT = 5

# Directory for persistent state
# If given, taloLogger and modules may persist part of their state as files
# to this directory. When taloLogger is started, the state may be loaded.
# Empty value disables state persisting.
#PERSISTENT_STATE_DIRECTORY = /home/talo/var/taloLogger/state


############################################################################# 
# data sources
#############################################################################
#
# Syntax:  @DATASOURCE=sourcemodule:modulename
# 
#          sourcemodule - Datasource module. Possible values are:
#                   DUMMY    - Provides dummy sinusoidial curve for testing
#                   SHELL    - Shell script or executable data source module
#                   OWFS     - OneWire module for OWFS
#                   DIGITEMP - OneWire module for DigiTemp
#                   MODBUS   - Modbus module
#                   EDSOWSERVER - OneWire module for EDS OWSERVER-ENET-2
#                   OUMAN    - OumanSerial module
#                   OUMANEH800 - Ouman EH800 ethernet module
#                   THERMIA  - ThermiaSerial module
#                   REGO     - RegoSerial module
#                   REGOCAN  - RegoCanSerial module
#                   EKOWELL  - EkowellSerial module
#                   NIBE     - NibeSerial module
#                   NIBEMODBUS - NibeModbus module
#                   NIBERS485 - NibeBusRS485 module
#                   THERMIQ  - ThermIQSerial module
#                   HUSDATA  - Husdata H1-interface module
#                   SMARTWEB - SmartWeb module
#                   TELLDUS  - Telldus module
#                   RPIGPIO  - Raspberry Pi GPIO module
#                   EDAMODBUSTCP - Enervent EDA ModbusTCP module
#                   EDASERIAL - Enervent EDA Serial module
#                   STELTRONCAN - StiebelEltronCanSerial module
#
#          modulename - identifying unique name given to this module in this 
#                   configuration. Module specific configuration parameters
#                   refer to this module name. Measurement points refer to 
#                   this module name. 
#
#                   Multiple datasources can be configured to use the same
#                   datasource module that have separate configuration values, 
#                   for example different serial ports.
#
# Example: Configure 2 Ouman controllers and onewire using OWFS. The 2 Ouman
#          controllers will be referred as OUMAN1 and OUMAN2 later in the
#          configuration. OWFS will be referred as Onewire.
#
#            @DATASOURCE=OUMAN:OUMAN1
#            @DATASOURCE=OUMAN:OUMAN2
#            @DATASOURCE=OWFS:Onewire
#
#############################################################################
@DATASOURCE=DUMMY:DUMMY
#@DATASOURCE=EDASERIAL:EDASERIAL

############################################################################# 
# data stores
#############################################################################
#
# Syntax:  @DATASTORE=storemodule:modulename
# 
#          storemodule - Datastore module. Possible values are:
#                   FILESTORE - Filestore module
#                   RRD       - RRD store module
#                   MYSQLDB   - MySQL database store module
#                   POSTGREDB - PostgreSQL database store module
#                   SQLITEDB  - SQLite database file store module
#
#          modulename - identifying unique name given to this module in this 
#                   configuration. Module specific configuration parameters
#                   refer to this module name.
#
# Info:    If no datastores are configured, taloLogger will output the 
#          measured data to the application log.
#
# Example: @DATASTORE=FILESTORE:Logfile
#
#############################################################################
#@DATASTORE=FILESTORE:FILESTORE
@DATASTORE=MYSQLDB:MYSQLDB

############################################################################# 
# Enervent EDA Serial Modbus RTU configuration
############################################################################# 

# Serial port name/address
EDASERIAL:SERIAL_PORT = /dev/ttyUSB0

############################################################################# 
# File store configuration
############################################################################# 

# Filename to log the data into
FILESTORE:NAME = /root/data.log
#FILESTORE:NAME = /Users/erik/Documents/website/talo/tmp

# Whether the log file will be overwritten on each log run producing a
# file with only the latest log data. (default false, the log file is
# appended with new data)
FILESTORE:OVERWRITE = false

# Pattern for the timestamp. The pattern is according to definition of the 
# Python time.strftime function. (The definition and pattern directives:
# http://docs.python.org/library/time.html#time.strftime )
#
# Example: Pattern  %d.%m.%Y %H:%M:%S  will produce a timestamp 
#          DD.MM.YYYY HH:MM:SS    
FILESTORE:TIMESTAMP = %d.%m.%Y %H:%M:%S

# Patterns for the data in the log file
#
#     :HEADER        written to the file before the data values
#     :DATAVALUE     pattern for one datavalue (will be inserted
#                    as many times as there are measured values
#     :DELIMITER     written between datavalues
#     :FOOTER        written to the file after the data values  
# 
# The patterns may contain the following escapes that are replaced
# with corresponding values. Pattern names are case insensitive so
# for example %s% and %S% will produce same result:
#    %S%     - one space character
#    %N%     - one newline
#    %T%     - one tab char
#    %A%     - one newline char (0x0A)
#    %R%     - one carriage return char (0x0D)
#    %TIME%  - timestamp in form configured by :TIMESTAMP pattern
#    %KEY%   - in the :DATAVALUE pattern will be the key corresponding to the
#              measurement. 
#    %VALUE% - in the :DATAVALUE pattern the data value corresponding to the
#              measurement, decimal separator as is read from the source.
#    %VALUE_C% - in the :DATAVALUE pattern the data value corresponding to the
#              measurement, decimal points converted to commas ','.    
#    %VALUE_P% - in the :DATAVALUE pattern the data value corresponding to the
#              measurement, decimal points converted to periods '.'.    
#
# Example:  the follofing patterns will produce a Excel CSV-file format
# FILESTORE:HEADER = %TIME%;
#FILESTORE:DATAVALUE = %VALUE_C%
# FILESTORE:DELIMITER = ;
# FILESTORE:FOOTER = %D%%A%

FILESTORE:HEADER = %TIME%:%N%
FILESTORE:DATAVALUE = %S%%S%%S%%S%%KEY%:%VALUE%%N%
FILESTORE:DELIMITER = 
FILESTORE:FOOTER = 

############################################################################# 
# MySql Database data store configuration
############################################################################# 

# Host name for MySql database
MYSQLDB:HOST = db 

# Port number for MySql database (optional, default 3306)
MYSQLDB:PORT = 3306 

# Database user name
MYSQLDB:USER = root 

# Database password
MYSQLDB:PASSWD = root

# Database name
MYSQLDB:NAME = talo

# Data table name
#MYSQLDB:TABLE = talolog

# Name for column to store timestamp for the measured data
#MYSQLDB:TIMECOL = time

# Native taloLogger database schema version. 0 or undefined to use
# user defined table name and time column. If set, TABLE and TIMECOL
# configuration values will be ignored.
# Available versions: 
#     1  -  since taloLoggerGraph v1.1a and taloLogger v1.5a
MYSQLDB:DB_SCHEMA_VERSION = 1

# Option to use MySQL Connector/Python for database access library
#     false - (Default) Use MySQLdb library
#     true  - Use MySQL Connector/Python
MYSQLDB:USE_MYSQL_CONNECTOR = false

@MEASURE=X1:DUMMY.a
#@MEASURE=X1:EDASERIAL.Fresh air temperature X1
#@MEASURE=X1:EDASERIAL.Fresh air temperature X1
#@MEASURE=X1:EDASERIAL.Fresh air temperature X1
#@MEASURE=X1:EDASERIAL.Fresh air temperature X1
